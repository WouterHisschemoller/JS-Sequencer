/**
 * View is a layer between the HTML and the rest of the application.
 * It updates the view to represent the app state and
 * passes DOM events generated by the user to the app.
 *
 * @namespace WH
 */
window.WH = window.WH || {};

(function (WH) {

    /**
     * @constructor
     */
    function File() {

        var settings = {
                projectName: 'project'
            },

            /**
             * Autosave file if true.
             * @type {Boolean}
             */
            autoSaveEnabled = true,

            /**
             * Autosave file if true.
             * @type {Object}
             */
            project = null;

        /**
         * Create a new arrangement.
         * @param {Boolean} isRandom If true create a randomized project.
         */
        this.createNew = function(isRandom) {
            if (!project) {
                project = WH.Project();
            }
            var data = isRandom ? project.getRandomized() : project.getEmpty();
            WH.TimeBase.setBPM(data.bpm);
            WH.Arrangement.setData(data.patterns);
            WH.Studio.setData(data.racks);
        };

        /**
         * Load project from localStorage.
         */
        this.loadFromStorage = function() {
            var data = localStorage.getItem(settings.projectName);
            if (data) {
                data = JSON.parse(data);
                WH.TimeBase.setBPM(data.bpm);
                WH.Arrangement.setData(data.patterns);
                WH.Studio.setData(data.racks);
            } else {
                console.error('No data in LocalStorage with name "' + settings.projectName + '"."');
            }
        };

        /**
         * Save project if autoSave is enabled.
         */
        this.autoSave = function() {
            if (autoSaveEnabled) {
                this.save();
            }
        }

        /**
         * Collect all project data and save it in localStorage.
         */
        this.save = function() {

            var data = {
                bpm: WH.TimeBase.getBPM(),
                patterns: WH.Arrangement.getData(),
                racks: WH.Studio.getData()
            }

            localStorage.setItem(settings.projectName, JSON.stringify(data));
        };
    }

    /**
     * Singleton
     */
    WH.File = new File();
})(WH);
